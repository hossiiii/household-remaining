import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@/lib/auth';
import { prisma } from '@/lib/prisma';

/**
 * 銀行別引落し予定一覧API
 * GET: 銀行別・日付別の引落し予定データを取得
 */
export async function GET(request: NextRequest) {
  try {
    const session = await auth();
    if (!session?.user?.id) {
      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const startDate = searchParams.get('startDate');
    const endDate = searchParams.get('endDate');

    // デフォルトの日付範囲を設定（現在月から3ヶ月間）
    const defaultStartDate = new Date();
    defaultStartDate.setDate(1); // 月初
    const defaultEndDate = new Date();
    defaultEndDate.setMonth(defaultEndDate.getMonth() + 3);
    defaultEndDate.setDate(0); // 3ヶ月後の月末

    const queryStartDate = startDate ? new Date(startDate) : defaultStartDate;
    const queryEndDate = endDate ? new Date(endDate) : defaultEndDate;

    // 自動生成された引落し予定取引を取得
    const withdrawalTransactions = await prisma.transaction.findMany({
      where: {
        userId: session.user.id,
        isAutoGenerated: true,
        type: 'EXPENSE',
        date: {
          gte: queryStartDate,
          lte: queryEndDate,
        },
      },
      include: {
        paymentMethod: {
          include: {
            bank: true,
          },
        },
      },
      orderBy: {
        date: 'asc',
      },
    });

    // 銀行別・日付別にデータを整理
    const scheduleData: { [date: string]: { [bankName: string]: { totalAmount: number; transactions: any[] } } } = {};
    const bankTotals: { [bankName: string]: { [yearMonth: string]: number } } = {};
    const bankNames = new Set<string>();
    const allDates = new Set<string>();

    for (const transaction of withdrawalTransactions) {
      const bankName = transaction.paymentMethod.bank?.name || '不明な銀行';
      const dateStr = transaction.date.toISOString().split('T')[0];
      const yearMonth = `${transaction.date.getFullYear()}-${String(transaction.date.getMonth() + 1).padStart(2, '0')}`;
      const amount = Number(transaction.amount);

      bankNames.add(bankName);
      allDates.add(dateStr);

      // 日別データの整理
      if (!scheduleData[dateStr]) {
        scheduleData[dateStr] = {};
      }
      if (!scheduleData[dateStr][bankName]) {
        scheduleData[dateStr][bankName] = { totalAmount: 0, transactions: [] };
      }
      scheduleData[dateStr][bankName].totalAmount += amount;
      scheduleData[dateStr][bankName].transactions.push(transaction);

      // 月別銀行別合計の計算
      if (!bankTotals[bankName]) {
        bankTotals[bankName] = {};
      }
      if (!bankTotals[bankName][yearMonth]) {
        bankTotals[bankName][yearMonth] = 0;
      }
      bankTotals[bankName][yearMonth] += amount;
    }

    // 月別合計データの作成
    const monthlyTotals: { [yearMonth: string]: { [bankName: string]: number } } = {};
    for (const [bankName, months] of Object.entries(bankTotals)) {
      for (const [yearMonth, amount] of Object.entries(months)) {
        if (!monthlyTotals[yearMonth]) {
          monthlyTotals[yearMonth] = {};
        }
        monthlyTotals[yearMonth][bankName] = amount;
      }
    }

    return NextResponse.json({
      success: true,
      data: {
        scheduleData,
        monthlyTotals,
        bankNames: Array.from(bankNames).sort(),
        dates: Array.from(allDates).sort(),
        summary: {
          totalBanks: bankNames.size,
          totalDates: allDates.size,
          totalTransactions: withdrawalTransactions.length,
        },
      },
    });
  } catch (error) {
    console.error('Bank withdrawal schedule API error:', error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}