import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@/lib/auth';
import { prisma } from '@/lib/prisma';

export interface BankWithdrawalScheduleItem {
  date: string; // YYYY-MM-DD format
  bankName: string;
  bankId: string;
  totalAmount: number;
  transactions: {
    id: string;
    purpose: string;
    amount: number;
    cardName?: string;
  }[];
}

export interface BankWithdrawalSummary {
  bankId: string;
  bankName: string;
  monthlyTotals: { [yearMonth: string]: number };
  totalAmount: number;
}

export interface BankWithdrawalScheduleResponse {
  schedule: BankWithdrawalScheduleItem[];
  bankSummaries: BankWithdrawalSummary[];
  dateRange: {
    startDate: string;
    endDate: string;
  };
}

/**
 * 銀行別引落し予定一覧API
 * GET: 指定された期間の銀行別引落し予定データを取得
 */
export async function GET(request: NextRequest) {
  try {
    const session = await auth();
    if (!session?.user?.id) {
      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const startDateParam = searchParams.get('startDate');
    const endDateParam = searchParams.get('endDate');

    // デフォルトでは現在月から3ヶ月間のデータを取得
    const now = new Date();
    const defaultStartDate = new Date(now.getFullYear(), now.getMonth(), 1);
    const defaultEndDate = new Date(now.getFullYear(), now.getMonth() + 3, 0);

    const startDate = startDateParam ? new Date(startDateParam) : defaultStartDate;
    const endDate = endDateParam ? new Date(endDateParam) : defaultEndDate;

    // 引落し予定取引を取得（自動生成されたEXPENSE取引で引落しに関するもの）
    const withdrawalTransactions = await prisma.transaction.findMany({
      where: {
        userId: session.user.id,
        date: {
          gte: startDate,
          lte: endDate,
        },
        type: 'EXPENSE',
        isAutoGenerated: true,
        purpose: {
          contains: '引き落とし',
        },
      },
      include: {
        paymentMethod: {
          include: {
            bank: true,
          },
        },
      },
      orderBy: {
        date: 'asc',
      },
    });

    // データを日付・銀行別にグループ化
    const scheduleMap = new Map<string, BankWithdrawalScheduleItem>();
    const bankSummaryMap = new Map<string, BankWithdrawalSummary>();

    for (const transaction of withdrawalTransactions) {
      const dateStr = transaction.date.toISOString().split('T')[0];
      const bankId = transaction.paymentMethod.bank?.id;
      const bankName = transaction.paymentMethod.bank?.name || 'Unknown Bank';
      
      if (!bankId) continue;

      // スケジュールデータの作成
      const key = `${dateStr}_${bankId}`;
      if (!scheduleMap.has(key)) {
        scheduleMap.set(key, {
          date: dateStr,
          bankName,
          bankId,
          totalAmount: 0,
          transactions: [],
        });
      }

      const scheduleItem = scheduleMap.get(key)!;
      scheduleItem.totalAmount += Number(transaction.amount);
      
      // カード名を推定（purpose から抽出）
      const cardName = transaction.purpose?.replace('引き落とし', '') || '';
      
      scheduleItem.transactions.push({
        id: transaction.id,
        purpose: transaction.purpose || '',
        amount: Number(transaction.amount),
        cardName: cardName,
      });

      // 銀行サマリーの作成・更新
      if (!bankSummaryMap.has(bankId)) {
        bankSummaryMap.set(bankId, {
          bankId,
          bankName,
          monthlyTotals: {},
          totalAmount: 0,
        });
      }

      const bankSummary = bankSummaryMap.get(bankId)!;
      const yearMonth = transaction.date.toISOString().slice(0, 7); // YYYY-MM
      
      if (!bankSummary.monthlyTotals[yearMonth]) {
        bankSummary.monthlyTotals[yearMonth] = 0;
      }
      bankSummary.monthlyTotals[yearMonth] += Number(transaction.amount);
      bankSummary.totalAmount += Number(transaction.amount);
    }

    const response: BankWithdrawalScheduleResponse = {
      schedule: Array.from(scheduleMap.values()).sort((a, b) => a.date.localeCompare(b.date)),
      bankSummaries: Array.from(bankSummaryMap.values()).sort((a, b) => a.bankName.localeCompare(b.bankName)),
      dateRange: {
        startDate: startDate.toISOString().split('T')[0],
        endDate: endDate.toISOString().split('T')[0],
      },
    };

    return NextResponse.json({ success: true, data: response });
  } catch (error) {
    console.error('Bank withdrawal schedule API error:', error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}