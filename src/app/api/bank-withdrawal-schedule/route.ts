import { NextRequest, NextResponse } from 'next/server';
import { auth } from '@/lib/auth';
import { prisma } from '@/lib/prisma';
import type { APIResponse } from '@/types';

export interface BankWithdrawalScheduleData {
  banks: { id: string; name: string }[];
  schedule: {
    year: number;
    month: number;
    date: string;
    withdrawals: {
      bankId: string;
      bankName: string;
      amount: number;
      transactions: {
        id: string;
        store: string;
        purpose: string;
        amount: number;
        cardName?: string;
      }[];
    }[];
  }[];
}

/**
 * 銀行別引き落とし予定一覧のデータを取得
 */
export async function GET(request: NextRequest): Promise<NextResponse> {
  try {
    const session = await auth();
    if (!session?.user?.id) {
      return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const startDateParam = searchParams.get('startDate');
    const endDateParam = searchParams.get('endDate');

    // デフォルトは今月から3ヶ月分
    const now = new Date();
    const defaultStartDate = new Date(now.getFullYear(), now.getMonth(), 1);
    const defaultEndDate = new Date(now.getFullYear(), now.getMonth() + 3, 0);

    const startDate = startDateParam ? new Date(startDateParam) : defaultStartDate;
    const endDate = endDateParam ? new Date(endDateParam) : defaultEndDate;

    // ユーザーの銀行一覧を取得
    const banks = await prisma.bank.findMany({
      where: {
        userId: session.user.id,
        isActive: true,
      },
      select: {
        id: true,
        name: true,
      },
      orderBy: {
        name: 'asc',
      },
    });

    // 指定期間内の引き落とし予定取引を取得
    const withdrawalTransactions = await prisma.transaction.findMany({
      where: {
        userId: session.user.id,
        date: {
          gte: startDate,
          lte: endDate,
        },
        type: 'EXPENSE',
        isAutoGenerated: true,
        paymentMethod: {
          type: 'BANK',
          bankId: {
            not: null,
          },
        },
      },
      include: {
        paymentMethod: {
          include: {
            bank: true,
          },
        },
      },
      orderBy: {
        date: 'asc',
      },
    });

    // カード情報も取得してカード名を取得できるようにする
    const cards = await prisma.card.findMany({
      where: {
        userId: session.user.id,
        isActive: true,
      },
      select: {
        id: true,
        name: true,
        withdrawalBankId: true,
      },
    });

    // 日付別にグループ化
    const scheduleMap = new Map<string, Map<string, any>>();

    withdrawalTransactions.forEach((transaction) => {
      const dateStr = transaction.date.toISOString().split('T')[0];
      const bankId = transaction.paymentMethod.bankId!;
      const bankName = transaction.paymentMethod.bank!.name;

      if (!scheduleMap.has(dateStr)) {
        scheduleMap.set(dateStr, new Map());
      }

      const dateSchedule = scheduleMap.get(dateStr)!;
      if (!dateSchedule.has(bankId)) {
        dateSchedule.set(bankId, {
          bankId,
          bankName,
          amount: 0,
          transactions: [],
        });
      }

      const bankSchedule = dateSchedule.get(bankId);
      bankSchedule.amount += Number(transaction.amount);
      
      // カード名を取得（引き落とし目的からカード名を抽出）
      let cardName: string | undefined;
      if (transaction.purpose && transaction.purpose.includes('引き落とし')) {
        const cardNameMatch = transaction.purpose.match(/^(.+)引き落とし$/);
        if (cardNameMatch) {
          cardName = cardNameMatch[1];
        }
      }

      bankSchedule.transactions.push({
        id: transaction.id,
        store: transaction.store || '',
        purpose: transaction.purpose || '',
        amount: Number(transaction.amount),
        cardName,
      });
    });

    // スケジュールデータを構築
    const schedule = Array.from(scheduleMap.entries())
      .map(([dateStr, bankSchedule]) => {
        const date = new Date(dateStr);
        return {
          year: date.getFullYear(),
          month: date.getMonth() + 1,
          date: dateStr,
          withdrawals: Array.from(bankSchedule.values()),
        };
      })
      .sort((a, b) => a.date.localeCompare(b.date));

    const responseData: BankWithdrawalScheduleData = {
      banks,
      schedule,
    };

    const response: APIResponse<BankWithdrawalScheduleData> = {
      success: true,
      data: responseData,
    };

    return NextResponse.json(response);
  } catch (error) {
    console.error('Bank withdrawal schedule API error:', error);
    const errorResponse: APIResponse<null> = {
      success: false,
      error: 'Failed to fetch bank withdrawal schedule',
    };
    return NextResponse.json(errorResponse, { status: 500 });
  }
}