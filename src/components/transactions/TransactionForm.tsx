'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Select } from '@/components/ui/Select';
import type { TransactionFormData, PaymentMethod, PaymentMethodWithRelations } from '@/types';
import { MasterService } from '@/lib/masters-client';
import { formatDateForInput, validateAmount } from '@/lib/utils';

interface TransactionFormProps {
  initialData?: Partial<TransactionFormData> & { isAutoGenerated?: boolean };
  onSubmit: (data: TransactionFormData) => Promise<void>;
  onCancel?: () => void;
  loading?: boolean;
}

export const TransactionForm: React.FC<TransactionFormProps> = ({
  initialData,
  onSubmit,
  onCancel,
  loading = false,
}) => {
  const [formData, setFormData] = useState<TransactionFormData>({
    date: initialData?.date || formatDateForInput(new Date()),
    paymentMethodId: initialData?.paymentMethodId || '',
    store: initialData?.store || '',
    purpose: initialData?.purpose || '',
    type: initialData?.type || 'expense',
    amount: initialData?.amount || 0,
    cardWithdrawalDate: initialData?.cardWithdrawalDate || '',
  });

  const [paymentMethods, setPaymentMethods] = useState<PaymentMethodWithRelations[]>([]);
  const [errors, setErrors] = useState<Partial<Record<keyof TransactionFormData, string>>>({});
  
  // 引き落とし取引かどうかを判定
  const isWithdrawalTransaction = initialData?.isAutoGenerated || false;
  
  // 選択中の支払い方法を取得
  const selectedPaymentMethod = paymentMethods.find(pm => pm.id === formData.paymentMethodId);
  const isCardPayment = selectedPaymentMethod?.type === 'CARD';

  useEffect(() => {
    loadPaymentMethods();
  }, []);

  const loadPaymentMethods = async () => {
    const result = await MasterService.getPaymentMethods();
    if (result.success && result.data) {
      setPaymentMethods(result.data);
    }
  };

  // カード取引の引き落とし予定日を計算
  const calculateWithdrawalDate = (transactionDate: Date, card: any): Date => {
    const txDate = new Date(transactionDate);
    const txYear = txDate.getFullYear();
    const txMonth = txDate.getMonth(); // 0-11
    const txDay = txDate.getDate();

    // 当月の締日
    const closingDate = new Date(txYear, txMonth, card.closingDay);

    let withdrawalYear: number;
    let withdrawalMonth: number;

    if (txDate >= closingDate) {
      // 締日以降の取引 → 翌月 + withdrawalMonthOffset分後に引き落とし
      withdrawalYear = txYear;
      withdrawalMonth = txMonth + 1 + card.withdrawalMonthOffset;
    } else {
      // 締日前の取引 → (withdrawalMonthOffset - 1)分後に引き落とし
      withdrawalYear = txYear;
      withdrawalMonth = txMonth + card.withdrawalMonthOffset - 1;
    }

    // 月の調整（12月を超えた場合の年跨ぎ処理）
    while (withdrawalMonth > 11) {
      withdrawalMonth -= 12;
      withdrawalYear += 1;
    }
    while (withdrawalMonth < 0) {
      withdrawalMonth += 12;
      withdrawalYear -= 1;
    }

    // 引き落とし予定日を作成
    const withdrawalDate = new Date(withdrawalYear, withdrawalMonth, card.withdrawalDay);

    // 該当月に指定日が存在しない場合（例：2月31日など）、月末に調整
    if (withdrawalDate.getMonth() !== withdrawalMonth) {
      withdrawalDate.setDate(0); // 前月の最終日
    }

    return withdrawalDate;
  };

  // カード支払いの場合、引き落とし日を自動計算
  useEffect(() => {
    if (isCardPayment && selectedPaymentMethod?.card && formData.date) {
      const transactionDate = new Date(formData.date);
      const withdrawalDate = calculateWithdrawalDate(transactionDate, selectedPaymentMethod.card);
      const withdrawalDateString = formatDateForInput(withdrawalDate);
      
      setFormData(prev => ({
        ...prev,
        cardWithdrawalDate: withdrawalDateString,
      }));
    } else if (!isCardPayment) {
      // カード以外の場合は引き落とし日をクリア
      setFormData(prev => ({
        ...prev,
        cardWithdrawalDate: '',
      }));
    }
  }, [isCardPayment, selectedPaymentMethod, formData.date]);

  const validateForm = (): boolean => {
    const newErrors: Partial<Record<keyof TransactionFormData, string>> = {};

    if (!formData.date) {
      newErrors.date = '日付を入力してください';
    }

    // 引き落とし取引の場合は日付のみバリデーション
    if (!isWithdrawalTransaction) {
      if (!formData.paymentMethodId) {
        newErrors.paymentMethodId = '支払い方法を選択してください';
      }

      if (!validateAmount(formData.amount) || formData.amount <= 0) {
        newErrors.amount = '正しい金額を入力してください';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    try {
      await onSubmit(formData);
    } catch (error) {
      console.error('Form submission error:', error);
    }
  };

  const handleInputChange = (field: keyof TransactionFormData, value: string | number) => {
    setFormData(prev => ({
      ...prev,
      [field]: value,
    }));

    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: undefined,
      }));
    }
  };

  const paymentMethodOptions = paymentMethods.map(method => ({
    value: method.id,
    label: method.name,
  }));

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {isWithdrawalTransaction && (
        <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
          <p className="text-sm text-blue-700">
            <span className="font-medium">引き落とし取引</span>
            - 日付のみ編集可能です。金額や支払い方法は自動計算されます。
          </p>
        </div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Input
          label="日付"
          type="date"
          value={formData.date}
          onChange={(e) => handleInputChange('date', e.target.value)}
          error={errors.date}
          required
        />

        <Select
          label="支払い方法"
          options={paymentMethodOptions}
          value={formData.paymentMethodId}
          onChange={(e) => handleInputChange('paymentMethodId', e.target.value)}
          placeholder="支払い方法を選択"
          error={errors.paymentMethodId}
          required
          disabled={isWithdrawalTransaction}
        />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Input
          label="使用店舗"
          type="text"
          value={formData.store}
          onChange={(e) => handleInputChange('store', e.target.value)}
          placeholder="店舗名を入力（任意）"
          disabled={isWithdrawalTransaction}
        />

        <Input
          label="用途"
          type="text"
          value={formData.purpose}
          onChange={(e) => handleInputChange('purpose', e.target.value)}
          placeholder="用途を入力（任意）"
          disabled={isWithdrawalTransaction}
        />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Select
          label="種別"
          options={[
            { value: 'income', label: '収入' },
            { value: 'expense', label: '支出' },
          ]}
          value={formData.type}
          onChange={(e) => handleInputChange('type', e.target.value as 'income' | 'expense')}
          required
          disabled={isWithdrawalTransaction}
        />

        <Input
          label="金額"
          type="text"
          inputMode="decimal"
          pattern="[0-9]*\.?[0-9]*"
          value={formData.amount.toString()}
          onChange={(e) => handleInputChange('amount', Number(e.target.value) || 0)}
          error={errors.amount}
          placeholder="金額を入力"
          required
          disabled={isWithdrawalTransaction}
        />
      </div>

      {/* カード支払いの場合、引き落とし予定日入力フィールドを表示 */}
      {isCardPayment && !isWithdrawalTransaction && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Input
            label="引き落とし予定日"
            type="date"
            value={formData.cardWithdrawalDate}
            onChange={(e) => handleInputChange('cardWithdrawalDate', e.target.value)}
            error={errors.cardWithdrawalDate}
            placeholder="引き落とし予定日を選択"
          />
          <div className="flex items-end">
            <div className="text-sm text-gray-600 bg-blue-50 p-3 rounded-lg">
              <p className="font-medium text-blue-800">自動計算結果</p>
              <p className="text-blue-700">
                取引日とカード設定から自動で計算されます。必要に応じて変更できます。
              </p>
            </div>
          </div>
        </div>
      )}

      <div className="flex space-x-3 pt-4">
        <Button
          type="submit"
          loading={loading}
          className="flex-1"
        >
          {initialData ? '更新' : '登録'}
        </Button>
        
        {onCancel && (
          <Button
            type="button"
            variant="secondary"
            onClick={onCancel}
            className="flex-1"
          >
            キャンセル
          </Button>
        )}
      </div>
    </form>
  );
};