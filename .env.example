# Database Configuration
# For local development with Docker PostgreSQL
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/household_db"

# For production with Supabase (use connection pooling)
# DATABASE_URL="postgresql://username:password@db.supabasehost.com:5432/postgres?pgbouncer=true"

# Direct database connection for migrations (without pgbouncer)
# DIRECT_URL="postgresql://username:password@db.supabasehost.com:5432/postgres"

# NextAuth.js Configuration
NEXTAUTH_SECRET="your-nextauth-secret-key-here"
NEXTAUTH_URL="http://localhost:3000"

# For production deployment on Vercel
# NEXTAUTH_URL="https://your-domain.vercel.app"
# Note: NEXTAUTH_URL is optional on Vercel as the app automatically uses VERCEL_URL for preview deployments

# Optional: Additional configuration
NODE_ENV="development"

# Instructions:
# 1. Copy this file to .env
# 2. Replace placeholder values with actual credentials
# 3. For local development, use the Docker PostgreSQL DATABASE_URL
# 4. For production, get credentials from your Supabase dashboard
# 5. Generate a secure NEXTAUTH_SECRET: https://generate-secret.vercel.app/32
# 6. Make sure to add .env to your .gitignore file (already included)

# Setup Commands:
# Local Development:
#   cp .env.example .env
#   docker-compose up -d
#   npm run db:push
#   npm run db:seed
#   npm run dev

# Production Deployment:
#   - Create Supabase project and get DATABASE_URL
#   - Set NEXTAUTH_URL to your production domain
#   - Deploy to Vercel with environment variables
#   - Run npm run db:deploy to apply migrations