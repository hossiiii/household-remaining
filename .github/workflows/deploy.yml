name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  deploy:
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Test database connection
        env:
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
        run: |
          echo "Testing direct database connection..."
          npx prisma db execute --url "$DIRECT_URL" --stdin <<< "SELECT 1" || echo "Direct connection failed"
          
      - name: Run database migration
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
        run: |
          echo "Running database migrations..."
          
          # Check current migration status
          echo "Checking migration status..."
          npx prisma migrate status || echo "Migration status check failed, continuing..."
          
          # Attempt migration deployment
          if npx prisma migrate deploy; then
            echo "Migration completed successfully."
          else
            echo "Migration failed. Attempting to resolve failed migrations..."
            
            # Get list of failed migrations
            MIGRATION_OUTPUT=$(npx prisma migrate status 2>&1)
            echo "Migration status output:"
            echo "$MIGRATION_OUTPUT"
            
            # Extract failed migration names - they appear after "Following migration have failed:"
            FAILED_MIGRATIONS=$(echo "$MIGRATION_OUTPUT" | sed -n '/Following migration have failed:/,/^$/p' | grep -E "^[0-9]{14}_" || echo "")
            
            # Alternative extraction method if first one fails
            if [ -z "$FAILED_MIGRATIONS" ]; then
              FAILED_MIGRATIONS=$(echo "$MIGRATION_OUTPUT" | grep -A 20 "have failed:" | grep -E "^[0-9]{14}_" || echo "")
            fi
            
            # If still empty, try to extract from error messages
            if [ -z "$FAILED_MIGRATIONS" ]; then
              FAILED_MIGRATIONS=$(echo "$MIGRATION_OUTPUT" | grep -o '[0-9]\{14\}_[a-zA-Z_]*' | head -1 || echo "")
            fi
            
            if [ -n "$FAILED_MIGRATIONS" ]; then
              echo "Found failed migrations: $FAILED_MIGRATIONS"
              
              # Try to resolve each failed migration
              echo "$FAILED_MIGRATIONS" | while read -r migration; do
                if [ -n "$migration" ]; then
                  echo "Attempting to resolve migration: $migration"
                  
                  # Check if the migration changes already exist in the database
                  # by comparing current schema with target schema
                  echo "Checking if migration changes are already applied..."
                  
                  # Try to mark as rolled back first, then retry
                  echo "Marking migration $migration as rolled back..."
                  npx prisma migrate resolve --rolled-back "$migration" || echo "Failed to mark as rolled back"
                fi
              done
              
              # Retry migration after resolving failed ones
              echo "Retrying migration deployment..."
              npx prisma migrate deploy || {
                echo "Migration still failing. Attempting baseline approach..."
                
                # As a last resort, try to baseline the first migration
                if [ -d "prisma/migrations" ]; then
                  FIRST_MIGRATION=$(ls -1 prisma/migrations | grep -E '^[0-9]{14}_' | head -n 1)
                  if [ -n "$FIRST_MIGRATION" ]; then
                    echo "Attempting to baseline migration: $FIRST_MIGRATION"
                    npx prisma migrate resolve --applied "$FIRST_MIGRATION" || echo "Baseline failed"
                    npx prisma migrate deploy || echo "Final migration attempt failed"
                  fi
                fi
              }
            else
              echo "No specific failed migrations found. This may be a different issue."
              exit 1
            fi
          fi
          
          echo "Migration process complete."

      - name: Run database seed (if needed)
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
        run: |
          # ÂàùÂõû„Éá„Éó„É≠„Ç§ÊôÇ„ÅÆ„Åø„Ç∑„Éº„ÉÄ„Éº„ÇíÂÆüË°å
          # „É¶„Éº„Ç∂„Éº„ÉÜ„Éº„Éñ„É´„Å´„Éá„Éº„Çø„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
          USER_COUNT=$(npx prisma db execute --url "$DATABASE_URL" --stdin <<< "SELECT COUNT(*) FROM users;" | grep -oE '[0-9]+' | head -1 || echo "0")
          
          if [ "$USER_COUNT" = "0" ] && [ -f "prisma/seed.ts" ]; then
            echo "Database is empty. Running seed..."
            npm run db:seed
          else
            echo "Database already has data or no seed file found. Skipping seed..."
          fi
        continue-on-error: true

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Notify Slack on Success
        if: success() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          MESSAGE="üöÄ „Éó„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥„Éá„Éó„É≠„Ç§„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ\n"
          MESSAGE+="„Éñ„É©„É≥„ÉÅ: ${{ github.ref_name }}\n"
          MESSAGE+="„Ç≥„Éü„ÉÉ„Éà: ${{ github.sha }}\n"
          MESSAGE+="Vercel URL: https://household-remaining.vercel.app"
          
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"$MESSAGE\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: failure() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          MESSAGE="‚ùå „Éó„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥„Éá„Éó„É≠„Ç§„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ\n"
          MESSAGE+="„Éñ„É©„É≥„ÉÅ: ${{ github.ref_name }}\n"
          MESSAGE+="„Ç≥„Éü„ÉÉ„Éà: ${{ github.sha }}\n"
          MESSAGE+="Á¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"$MESSAGE\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}