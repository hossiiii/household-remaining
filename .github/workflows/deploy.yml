name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  deploy:
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Test database connection
        env:
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
        run: |
          echo "Testing direct database connection..."
          npx prisma db execute --url "$DIRECT_URL" --stdin <<< "SELECT 1" || echo "Direct connection failed"
          
      - name: Run database migration
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
        run: |
          echo "Running database migrations..."
          npx prisma migrate deploy || {
            echo "Migration failed. Checking if this is a baseline issue..."
            # Get the first migration name dynamically
            if [ -d "prisma/migrations" ]; then
              FIRST_MIGRATION=$(ls -1 prisma/migrations | grep -E '^[0-9]{14}_' | head -n 1)
              if [ -n "$FIRST_MIGRATION" ]; then
                echo "Marking migration $FIRST_MIGRATION as applied..."
                npx prisma migrate resolve --applied "$FIRST_MIGRATION" || true
                # Try migration again
                npx prisma migrate deploy
              else
                echo "No migrations found to baseline"
                exit 1
              fi
            else
              echo "No migrations directory found"
              exit 1
            fi
          }
          echo "Migration complete."

      - name: Run database seed (if needed)
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
        run: |
          # 初回デプロイ時のみシーダーを実行
          # ユーザーテーブルにデータがあるかチェック
          USER_COUNT=$(npx prisma db execute --url "$DATABASE_URL" --stdin <<< "SELECT COUNT(*) FROM users;" | grep -oE '[0-9]+' | head -1 || echo "0")
          
          if [ "$USER_COUNT" = "0" ] && [ -f "prisma/seed.ts" ]; then
            echo "Database is empty. Running seed..."
            npm run db:seed
          else
            echo "Database already has data or no seed file found. Skipping seed..."
          fi
        continue-on-error: true

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Notify Slack on Success
        if: success() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          MESSAGE="🚀 プロダクションデプロイが完了しました！\n"
          MESSAGE+="ブランチ: ${{ github.ref_name }}\n"
          MESSAGE+="コミット: ${{ github.sha }}\n"
          MESSAGE+="Vercel URL: https://household-remaining.vercel.app"
          
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"$MESSAGE\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: failure() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          MESSAGE="❌ プロダクションデプロイが失敗しました。\n"
          MESSAGE+="ブランチ: ${{ github.ref_name }}\n"
          MESSAGE+="コミット: ${{ github.sha }}\n"
          MESSAGE+="確認してください: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"$MESSAGE\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}